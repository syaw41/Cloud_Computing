{
  "name": "feature",
  "description": "Granular Feature Detection for Browsers",
  "tags": [
    "feature detection",
    "browser"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "version": "0.1.4",
  "devDependencies": {
    "tape": "~2.4.2",
    "crel": "~1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/DamonOehlman/feature.git"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/feature/issues"
  },
  "scripts": {
    "gendocs": "gendocs > README.md",
    "lint": "jshint *.js && jshint element/*.js"
  },
  "testling": {
    "files": "test/all.js",
    "browsers": [
      "ie/9",
      "ie/10",
      "chrome/latest",
      "firefox/latest",
      "safari/latest",
      "opera/latest"
    ]
  },
  "contributors": [],
  "readme": "# feature\n\nFeature-detection at a highly targeted level.\n\n\n[![NPM](https://nodei.co/npm/feature.png)](https://nodei.co/npm/feature/)\n\n\n[![browser support](https://ci.testling.com/DamonOehlman/feature.png)](https://ci.testling.com/DamonOehlman/feature)\n\n\n## What about Modernizr?\n\n[Modernizr](https://github.com/Modernizr) is wonderful, no doubt about it.\nIt is however, pretty massive and while it can be whittled down to a smaller\nsize using customization from the download page, I'm just a bit too lazy\nfor that.\n\nBy leveraging Browserify's excellent static analysis (powered by\n[esprima](https://github.com/ariya/esprima)), when `feature` is\nused within an application in a selective way, only the targeted feature\ndetection is included in the resultant JS file.\n\nSo if I was to write the following require:\n\n```js\nvar fullscreen = require('feature/fullscreen');\n```\n\nThen only the\n[fullscreen](https://github.com/DamonOehlman/feature/blob/master/fullscreen.js)\ncode from feature would be included in my application.  All the rest of the\nmodule would simply be ignored.  So that's why. It's purely selfish, and\nwell you should feel free to keep on using Modernizr.\n\n## Reference\n\n### css(prop)\n\nTest for the prescence of the specified CSS property (in all it's\npossible browser prefixed variants).  The returned function (if we\nare able to access the required style property) is both a getter and\nsetter function for when given an element.\n\nConsider the following example, with regards to CSS transforms:\n\n```js\nvar transform = require('feature/css')('transform');\nvar crel = require('crel');\nvar el = crel('div', 'test');\n\n// if we have transforms available, then apply one\nif (transform) {\n  transform(el, 'translate(500px, 100px)');\n}\n\n// add the test div to the document\ndocument.body.appendChild(el);\n\n// log out the el position\nconsole.log(el.getBoundingClientRect().left);\n// ~~> 508\n```\n\n### detect\n\nThe core functionality of the feature module is powered by the `detect`\nfunction, which can be imported like so:\n\n```js\nvar detect = require('feature/detect');\n```\n\nOnce you have the detect function available you can do nifty things like\ndetect whether your browser supports `requestAnimationFrame`:\n\n```js\nvar raf = require('feature/detect')('requestAnimationFrame');\n\nfunction logRandom() {\n  console.log(Math.random());\n  raf(logRandom);\n}\n\n// create a requestAnimationFrame fallback\nraf = raf || function(fn) {\n  setTimeout(fn, 1000 / 60);\n};\n\n// start logging random numbers (for some reason...)\nlogRandom();\n```\n\nIf it does then `raf` will be a function that is equivalent to the browser\nprefixed requestAnimationFrame function (e.g. webkitRequestAnimationFrame).\nIt should be noted that feature does nothing to try and polyfill things that\ndon't exist, that is left to you to implement yourself.\n\n### fullscreen\n\nIf the [Fullscreen API](http://caniuse.com/#feat=fullscreen) is available\nthis will allow you to fullscreen either the document or a target element.\n\n```js\nvar fullscreen = require('feature/fullscreen');\n\nif (fullscreen) {\n  fullscreen();\n}\n```\n\nAdditionally, the function can be passed directly to an event handler and\nthe function will fullscreen just the selected element.  This is useful\nin the case of videos, images, etc.\n\n```js\nvar fullscreen = require('feature/fullscreen');\nvar crel = require('crel');\nvar img = crel('img', {\n  src: 'http://upload.wikimedia.org/wikipedia/commons/d/d3/Jim_jim_falls.jpg',\n});\n\nimg.addEventListener('click', fullscreen);\n\ndocument.body.appendChild(img);\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "feature@0.1.4",
  "dist": {
    "shasum": "af1701e9d728089997ce2de0f340c9ad8bd6c03a"
  },
  "_from": "feature@^0.1.4",
  "_resolved": "https://registry.npmjs.org/feature/-/feature-0.1.4.tgz"
}
